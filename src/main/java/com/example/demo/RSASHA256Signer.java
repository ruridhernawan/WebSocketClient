package com.example.demo;

import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
public class RSASHA256Signer {
	public String signature(String key , String payload ) {
	 try {
		 
         // Replace with your actual base64 encoded private key
         //String privateKeyBase64 = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJRXZnSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2d3Z2dTa0FnRUFBb0lCQVFENWFGQzJWMlBrZnI1dA0KNzAyWTBVR0JpMm1nUWFQaFpoNUdhNlpNM1QxaVZCckRxczhLN0VFWkdsZnpUejBldkhPSFFmd3poNVprMXQ4WA0KWWxjV2JHdEFHY2JIWDJ0K0krc1EwWGVyays3VnZURGkxS0VRZ3JWZllZWkZzZVhLdEVrNC9XUEQvVjM2RUkvMA0KdXBTb213V1B3ZFhVaEI0OE1nWUhiZDAzNTR2SFNia1NSc2dRYnBMKzRhVXNEY2lTdDRxck03NlVxaE45Ky9paQ0KYkhqS1pMRlhrNmsrcExHY1hKc3lLVzVteTRtRWtyNVpJTlAyOGQ2LzljU1BndGNWQ09HL3VsTjQwdWg2Nmo0VA0KNUc3SDFxdEtpcjFkLzJWNHdIclVJajNuTGl2NGlxL2pzSHh6eGtkd0tMeHc3bThjNnU0Z2JrUGxOWGd2YzBFZA0KNGlRUjVzSXJBZ01CQUFFQ2dnRUFBZTVzWFpVY3FXclAxN01ZTXp3L21SeTJ3eTV1OGZKai9xQ2J4NUdaQlpkbw0KSTZiQmRyQ3dxbHlaWE1GNjFDK2FaMnc3NHp4RURtRFpsbWxGQ2wvcGpyUUVaWXZZSGNCeWRBMWpNMWx3YW9oTw0KQmh1bWFhWFJlTDBkR0pJUm1QbS9iV2tNNmpvZWphNnVKck9CTGpNUkhuVmVUZ2g5NFhKenVJQUJ6QXFIZXhJVA0KcW5XMys1YTdFeDhDbjFnRjY1NmZNVk9GcnREUGFkUUJVMWYrczRnZzcwNTR1bEdRWWgxK3JnNFErOUFCR3Bzag0KdCtHYnFva3A4akk1UWowb2I0T1JqcHpMSzd2QU4weGJia2pXREl0VHZNWlVrV1ZVaDdRckljOFc5SzVDUCtDdQ0KT2ppU0pXeXpqeENEME1iUUhEQXMxTkpTdWdwZFdxK0NhTWxUUTQ4Y1pRS0JnUUQ3dC94OFlMVjZsVElpMk1qWQ0KdWs4R3UvaWRkWUorQkFjN0xiM2xUbWs1WU0wb3A1VUhiNWNkREdTNklIUnB1Q3dvWit4bllzRFBiaDJhS1B6eQ0KeWt3aWtES2lQYW9xT1N4c21tWGxoUzhOVGhONHA5YzY0eEhuWGV6NDRnREhJcmpRVFVQb2F5NytYNGdOQTdHYw0Kejh6ZFJjcjk1akZnS2cxUTV6dkxNTE1GendLQmdRRDlwa1FFNlI3b2tQMFJxSEh6VGV1Q3N4aFJvUXk3dmxrTA0KZDR2LzdJNkhJVEh0NStBbGF5Rm5LN0tHYnJONlNlSEJrTEYvN1U5VndqOVlVcVBSU2ZxQkRJd1czRjE3WlFQUg0KcDhSNzlBYVBqdmc3QTJMNFlGMHhYRjdBZUZVRzhSZ3dXTHVXejJvbG50YzVmcE5qazlpeVJrR2tKRXhINnJ0aw0KVmc3OTQwaHc1UUtCZ1FEUExCK1hjclVLdmc2MGxYM0F1cDVlS1lrMmQwZStWYXhwN1h6VVpOTy8wTWNxQmJ0bg0Ka2xWcUtCQWpES0VqZmR5Q0tQNXVITjRhRzBRcjVENUR5WEllSkZZNEo4Nk16OStiUnZ4RWluZ3VXQ3M0YTlOOQ0KK1BOOFhGYTBoTFlsTDVPeWhWVTF6am13VElvYVJBY0R6QmVOcW1xbXk3V3BzeEtnbXFBZzNPVUxDd0tCZ0ZOMw0KcVI1c2tDMDd1T3Rjb05MTnExaEJFeG1aZzVVc1dDVDcyK2dGc2drcGxVS1NjU0lmRk1qY2lrek9sT1VDOXZVNQ0KWmcrUXlmQ1FrVVBCUGdNYTh3SVFYUEVRNXZvNkRYMnFWVy9zcDFRS1dna2hYaW9abTlFb2NrMm55Mk1UWjBCUg0Ka3JsWDI3Z3hndVY2ajRuUEZ4bmpJS3FnL3pFVFAwTVBSck9wWFNjNUFvR0JBSXBvRGJsbkt1ZkVJbzdNRm9RdA0Kb3J1TUV0ZTJiTStlNTMrV0paQ0xidHdWZ0I5eTVDTnR6d0Y0TFI3MXJiQk5FQzgzWWtxN2tMQ3kvSUlVbFBqYQ0KSVpRMjU5Z0JaWHJYNDVzbWk2QW9WdjVYWmlGQzRMdVpIUXVlc09tNzY4d1FhMUVoTmlLS0Fwd3BUNjJqRlpOTQ0Ka1NZZksySnhmSUZLZUxycWNZOElLcXBuDQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ0K";
         String privateKeyBase64 ;
         
         if (key == null || key.equals(""))
        	 privateKeyBase64 = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJRXZnSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2d3Z2dTa0FnRUFBb0lCQVFENWFGQzJWMlBrZnI1dA0KNzAyWTBVR0JpMm1nUWFQaFpoNUdhNlpNM1QxaVZCckRxczhLN0VFWkdsZnpUejBldkhPSFFmd3poNVprMXQ4WA0KWWxjV2JHdEFHY2JIWDJ0K0krc1EwWGVyays3VnZURGkxS0VRZ3JWZllZWkZzZVhLdEVrNC9XUEQvVjM2RUkvMA0KdXBTb213V1B3ZFhVaEI0OE1nWUhiZDAzNTR2SFNia1NSc2dRYnBMKzRhVXNEY2lTdDRxck03NlVxaE45Ky9paQ0KYkhqS1pMRlhrNmsrcExHY1hKc3lLVzVteTRtRWtyNVpJTlAyOGQ2LzljU1BndGNWQ09HL3VsTjQwdWg2Nmo0VA0KNUc3SDFxdEtpcjFkLzJWNHdIclVJajNuTGl2NGlxL2pzSHh6eGtkd0tMeHc3bThjNnU0Z2JrUGxOWGd2YzBFZA0KNGlRUjVzSXJBZ01CQUFFQ2dnRUFBZTVzWFpVY3FXclAxN01ZTXp3L21SeTJ3eTV1OGZKai9xQ2J4NUdaQlpkbw0KSTZiQmRyQ3dxbHlaWE1GNjFDK2FaMnc3NHp4RURtRFpsbWxGQ2wvcGpyUUVaWXZZSGNCeWRBMWpNMWx3YW9oTw0KQmh1bWFhWFJlTDBkR0pJUm1QbS9iV2tNNmpvZWphNnVKck9CTGpNUkhuVmVUZ2g5NFhKenVJQUJ6QXFIZXhJVA0KcW5XMys1YTdFeDhDbjFnRjY1NmZNVk9GcnREUGFkUUJVMWYrczRnZzcwNTR1bEdRWWgxK3JnNFErOUFCR3Bzag0KdCtHYnFva3A4akk1UWowb2I0T1JqcHpMSzd2QU4weGJia2pXREl0VHZNWlVrV1ZVaDdRckljOFc5SzVDUCtDdQ0KT2ppU0pXeXpqeENEME1iUUhEQXMxTkpTdWdwZFdxK0NhTWxUUTQ4Y1pRS0JnUUQ3dC94OFlMVjZsVElpMk1qWQ0KdWs4R3UvaWRkWUorQkFjN0xiM2xUbWs1WU0wb3A1VUhiNWNkREdTNklIUnB1Q3dvWit4bllzRFBiaDJhS1B6eQ0KeWt3aWtES2lQYW9xT1N4c21tWGxoUzhOVGhONHA5YzY0eEhuWGV6NDRnREhJcmpRVFVQb2F5NytYNGdOQTdHYw0Kejh6ZFJjcjk1akZnS2cxUTV6dkxNTE1GendLQmdRRDlwa1FFNlI3b2tQMFJxSEh6VGV1Q3N4aFJvUXk3dmxrTA0KZDR2LzdJNkhJVEh0NStBbGF5Rm5LN0tHYnJONlNlSEJrTEYvN1U5VndqOVlVcVBSU2ZxQkRJd1czRjE3WlFQUg0KcDhSNzlBYVBqdmc3QTJMNFlGMHhYRjdBZUZVRzhSZ3dXTHVXejJvbG50YzVmcE5qazlpeVJrR2tKRXhINnJ0aw0KVmc3OTQwaHc1UUtCZ1FEUExCK1hjclVLdmc2MGxYM0F1cDVlS1lrMmQwZStWYXhwN1h6VVpOTy8wTWNxQmJ0bg0Ka2xWcUtCQWpES0VqZmR5Q0tQNXVITjRhRzBRcjVENUR5WEllSkZZNEo4Nk16OStiUnZ4RWluZ3VXQ3M0YTlOOQ0KK1BOOFhGYTBoTFlsTDVPeWhWVTF6am13VElvYVJBY0R6QmVOcW1xbXk3V3BzeEtnbXFBZzNPVUxDd0tCZ0ZOMw0KcVI1c2tDMDd1T3Rjb05MTnExaEJFeG1aZzVVc1dDVDcyK2dGc2drcGxVS1NjU0lmRk1qY2lrek9sT1VDOXZVNQ0KWmcrUXlmQ1FrVVBCUGdNYTh3SVFYUEVRNXZvNkRYMnFWVy9zcDFRS1dna2hYaW9abTlFb2NrMm55Mk1UWjBCUg0Ka3JsWDI3Z3hndVY2ajRuUEZ4bmpJS3FnL3pFVFAwTVBSck9wWFNjNUFvR0JBSXBvRGJsbkt1ZkVJbzdNRm9RdA0Kb3J1TUV0ZTJiTStlNTMrV0paQ0xidHdWZ0I5eTVDTnR6d0Y0TFI3MXJiQk5FQzgzWWtxN2tMQ3kvSUlVbFBqYQ0KSVpRMjU5Z0JaWHJYNDVzbWk2QW9WdjVYWmlGQzRMdVpIUXVlc09tNzY4d1FhMUVoTmlLS0Fwd3BUNjJqRlpOTQ0Ka1NZZksySnhmSUZLZUxycWNZOElLcXBuDQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ0K";
         else
        	 privateKeyBase64 = key ;
         
         
         // The payload to be signed
     //    payload = "AGR202406101411122024-06-10 14:11:12ARTEKids-pln-pre52000000000050000AGR20240610141112DEVWhgMxETezQ9apNwq2B64";

         
         
         // Decode the private key
         byte[] keyBytes = Base64.getDecoder().decode(privateKeyBase64);
         PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
         KeyFactory keyFactory = KeyFactory.getInstance("RSA");
         PrivateKey privateKey = keyFactory.generatePrivate(keySpec);

         // Create the SHA256 with RSA signature
         Signature signature = Signature.getInstance("SHA256withRSA");
         signature.initSign(privateKey);
         signature.update(payload.getBytes(StandardCharsets.UTF_8));

         // Sign the data
         byte[] signedData = signature.sign();

         // Encode the signed data to Base64
         String signedDataBase64 = Base64.getEncoder().encodeToString(signedData);

       
         return(signedDataBase64);
     } catch (Exception e) {
         e.printStackTrace();
         return "" ;
     }
	}
}
